import {
  __name
} from "../../chunk-GZWC6LYU.js";

// src/commands/General/createWhitelistButton.ts
import { ButtonKit } from "commandkit";
import {
  ButtonStyle,
  ActionRowBuilder,
  EmbedBuilder,
  SlashCommandBuilder
} from "discord.js";
var data = new SlashCommandBuilder().setName("createbutton").setDescription("Create the whitelist Button").addStringOption(
  (option) => option.setName("title").setDescription("Title displayed in the embed").setRequired(true)
).addStringOption(
  (option) => option.setName("description").setDescription("Description displayed in the embed")
);
async function run({ interaction, client, handler }) {
  const Embed = new EmbedBuilder().setColor("#b9d7d7").setTitle(
    client.user.displayName + " " + interaction.options.getString("title")
  ).setAuthor({
    name: client.user.displayName,
    iconURL: client.user.displayAvatarURL()
  }).setDescription(interaction.options.getString("description") ?? "").setThumbnail(client.user.displayAvatarURL()).setFooter({ text: "Minecraft Whitelist Bot" });
  const button = new ButtonKit().setEmoji("\u{1F4DD}").setStyle(ButtonStyle.Success).setCustomId("button");
  const buttonRow = new ActionRowBuilder().addComponents(button);
  if (!interaction.channel?.isSendable || interaction.channel.isDMBased())
    return;
  const message = await interaction.channel.send({
    embeds: [Embed],
    components: [buttonRow]
  });
}
__name(run, "run");
var options = {
  userPermissions: ["Administrator"]
};
export {
  data,
  options,
  run
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL0dlbmVyYWwvY3JlYXRlV2hpdGVsaXN0QnV0dG9uLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBCdXR0b25LaXQgfSBmcm9tIFwiY29tbWFuZGtpdFwiO1xyXG5pbXBvcnQge1xyXG4gIEJ1dHRvblN0eWxlLFxyXG4gIEFjdGlvblJvd0J1aWxkZXIsXHJcbiAgRW1iZWRCdWlsZGVyLFxyXG4gIFNsYXNoQ29tbWFuZEJ1aWxkZXIsXHJcbn0gZnJvbSBcImRpc2NvcmQuanNcIjtcclxuXHJcbmltcG9ydCB0eXBlIHtcclxuICBDb21tYW5kRGF0YSxcclxuICBTbGFzaENvbW1hbmRQcm9wcyxcclxuICBDb21tYW5kT3B0aW9ucyxcclxufSBmcm9tIFwiY29tbWFuZGtpdFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRhdGEgPSBuZXcgU2xhc2hDb21tYW5kQnVpbGRlcigpXHJcbiAgLnNldE5hbWUoXCJjcmVhdGVidXR0b25cIilcclxuICAuc2V0RGVzY3JpcHRpb24oXCJDcmVhdGUgdGhlIHdoaXRlbGlzdCBCdXR0b25cIilcclxuICAuYWRkU3RyaW5nT3B0aW9uKChvcHRpb24pID0+XHJcbiAgICBvcHRpb25cclxuICAgICAgLnNldE5hbWUoXCJ0aXRsZVwiKVxyXG4gICAgICAuc2V0RGVzY3JpcHRpb24oXCJUaXRsZSBkaXNwbGF5ZWQgaW4gdGhlIGVtYmVkXCIpXHJcbiAgICAgIC5zZXRSZXF1aXJlZCh0cnVlKVxyXG4gIClcclxuICAuYWRkU3RyaW5nT3B0aW9uKChvcHRpb24pID0+XHJcbiAgICBvcHRpb25cclxuICAgICAgLnNldE5hbWUoXCJkZXNjcmlwdGlvblwiKVxyXG4gICAgICAuc2V0RGVzY3JpcHRpb24oXCJEZXNjcmlwdGlvbiBkaXNwbGF5ZWQgaW4gdGhlIGVtYmVkXCIpXHJcbiAgKTtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBydW4oeyBpbnRlcmFjdGlvbiwgY2xpZW50LCBoYW5kbGVyIH06IFNsYXNoQ29tbWFuZFByb3BzKSB7XHJcbiAgY29uc3QgRW1iZWQgPSBuZXcgRW1iZWRCdWlsZGVyKClcclxuICAgIC5zZXRDb2xvcihcIiNiOWQ3ZDdcIilcclxuICAgIC5zZXRUaXRsZShcclxuICAgICAgY2xpZW50LnVzZXIuZGlzcGxheU5hbWUgKyBcIiBcIiArIGludGVyYWN0aW9uLm9wdGlvbnMuZ2V0U3RyaW5nKFwidGl0bGVcIilcclxuICAgIClcclxuICAgIC5zZXRBdXRob3Ioe1xyXG4gICAgICBuYW1lOiBjbGllbnQudXNlci5kaXNwbGF5TmFtZSxcclxuICAgICAgaWNvblVSTDogY2xpZW50LnVzZXIuZGlzcGxheUF2YXRhclVSTCgpLFxyXG4gICAgfSlcclxuICAgIC5zZXREZXNjcmlwdGlvbihpbnRlcmFjdGlvbi5vcHRpb25zLmdldFN0cmluZyhcImRlc2NyaXB0aW9uXCIpID8/IFwiXCIpXHJcbiAgICAuc2V0VGh1bWJuYWlsKGNsaWVudC51c2VyLmRpc3BsYXlBdmF0YXJVUkwoKSlcclxuICAgIC5zZXRGb290ZXIoeyB0ZXh0OiBcIk1pbmVjcmFmdCBXaGl0ZWxpc3QgQm90XCIgfSk7XHJcblxyXG4gIGNvbnN0IGJ1dHRvbiA9IG5ldyBCdXR0b25LaXQoKVxyXG4gICAgLnNldEVtb2ppKFwiXHVEODNEXHVEQ0REXCIpXHJcbiAgICAuc2V0U3R5bGUoQnV0dG9uU3R5bGUuU3VjY2VzcylcclxuICAgIC5zZXRDdXN0b21JZChcImJ1dHRvblwiKTtcclxuXHJcbiAgY29uc3QgYnV0dG9uUm93ID0gbmV3IEFjdGlvblJvd0J1aWxkZXI8QnV0dG9uS2l0PigpLmFkZENvbXBvbmVudHMoYnV0dG9uKTtcclxuXHJcbiAgaWYgKCFpbnRlcmFjdGlvbi5jaGFubmVsPy5pc1NlbmRhYmxlIHx8IGludGVyYWN0aW9uLmNoYW5uZWwuaXNETUJhc2VkKCkpXHJcbiAgICByZXR1cm47XHJcblxyXG4gIGNvbnN0IG1lc3NhZ2UgPSBhd2FpdCBpbnRlcmFjdGlvbi5jaGFubmVsLnNlbmQoe1xyXG4gICAgZW1iZWRzOiBbRW1iZWRdLFxyXG4gICAgY29tcG9uZW50czogW2J1dHRvblJvd10sXHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBvcHRpb25zOiBDb21tYW5kT3B0aW9ucyA9IHtcclxuICB1c2VyUGVybWlzc2lvbnM6IFtcIkFkbWluaXN0cmF0b3JcIl0sXHJcbn07XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7O0FBQUEsU0FBUyxpQkFBaUI7QUFDMUI7QUFBQSxFQUNFO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsT0FDSztBQVFBLElBQU0sT0FBTyxJQUFJLG9CQUFvQixFQUN6QyxRQUFRLGNBQWMsRUFDdEIsZUFBZSw2QkFBNkIsRUFDNUM7QUFBQSxFQUFnQixDQUFDLFdBQ2hCLE9BQ0csUUFBUSxPQUFPLEVBQ2YsZUFBZSw4QkFBOEIsRUFDN0MsWUFBWSxJQUFJO0FBQ3JCLEVBQ0M7QUFBQSxFQUFnQixDQUFDLFdBQ2hCLE9BQ0csUUFBUSxhQUFhLEVBQ3JCLGVBQWUsb0NBQW9DO0FBQ3hEO0FBRUYsZUFBc0IsSUFBSSxFQUFFLGFBQWEsUUFBUSxRQUFRLEdBQXNCO0FBQzdFLFFBQU0sUUFBUSxJQUFJLGFBQWEsRUFDNUIsU0FBUyxTQUFTLEVBQ2xCO0FBQUEsSUFDQyxPQUFPLEtBQUssY0FBYyxNQUFNLFlBQVksUUFBUSxVQUFVLE9BQU87QUFBQSxFQUN2RSxFQUNDLFVBQVU7QUFBQSxJQUNULE1BQU0sT0FBTyxLQUFLO0FBQUEsSUFDbEIsU0FBUyxPQUFPLEtBQUssaUJBQWlCO0FBQUEsRUFDeEMsQ0FBQyxFQUNBLGVBQWUsWUFBWSxRQUFRLFVBQVUsYUFBYSxLQUFLLEVBQUUsRUFDakUsYUFBYSxPQUFPLEtBQUssaUJBQWlCLENBQUMsRUFDM0MsVUFBVSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFaEQsUUFBTSxTQUFTLElBQUksVUFBVSxFQUMxQixTQUFTLFdBQUksRUFDYixTQUFTLFlBQVksT0FBTyxFQUM1QixZQUFZLFFBQVE7QUFFdkIsUUFBTSxZQUFZLElBQUksaUJBQTRCLEVBQUUsY0FBYyxNQUFNO0FBRXhFLE1BQUksQ0FBQyxZQUFZLFNBQVMsY0FBYyxZQUFZLFFBQVEsVUFBVTtBQUNwRTtBQUVGLFFBQU0sVUFBVSxNQUFNLFlBQVksUUFBUSxLQUFLO0FBQUEsSUFDN0MsUUFBUSxDQUFDLEtBQUs7QUFBQSxJQUNkLFlBQVksQ0FBQyxTQUFTO0FBQUEsRUFDeEIsQ0FBQztBQUNIO0FBNUJzQjtBQThCZixJQUFNLFVBQTBCO0FBQUEsRUFDckMsaUJBQWlCLENBQUMsZUFBZTtBQUNuQzsiLAogICJuYW1lcyI6IFtdCn0K